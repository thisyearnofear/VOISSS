diff --git a/.gitignore b/.gitignore
index 016e6e2..206317e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -73,7 +73,7 @@ jspm_packages/
 .parcel-cache
 
 # Next.js build output
-.next
+.next/
 out/
 
 # Nuxt.js build / generate output
@@ -126,11 +126,13 @@ web-build/
 .metro-health-check*
 
 # Flipper
-ios/Pods/
+# Flipper - moved to platform-specific section
+# ios/Pods/
 
 # CocoaPods
-ios/Pods/
-ios/Podfile.lock
+# CocoaPods - moved to platform-specific section
+# ios/Pods/
+# ios/Podfile.lock
 
 # Android/IntelliJ
 build/
@@ -238,10 +240,10 @@ Temporary Items
 *.flac
 
 # Build artifacts
-apps/*/build/
-apps/*/dist/
-packages/*/build/
-packages/*/dist/
+apps/**/build/
+apps/**/dist/
+packages/**/build/
+packages/**/dist/
 
 # Test coverage
 coverage/
@@ -265,23 +267,49 @@ hackathon-starknet/
 .turbo/
 
 # Flutter
+# Flutter / Dart
 .dart_tool/
 .flutter-plugins
 .flutter-plugins-dependencies
 .packages
 .pub-cache/
 .pub/
-build/
+# build/ # This is too broad, handled by platform-specific ignores
 flutter_*.png
 flutter_*.log
 pubspec.lock
 devtools_options.yaml
-**/ios/Flutter/Generated.xcconfig
-**/ios/Flutter/ephemeral/
-**/ios/Flutter/flutter_export_environment.sh
-**/ios/Runner/GeneratedPluginRegistrant.*
-**/ios/Runner/Info.plist
-**/ios/
-**/android/app/debug
-**/android/app/profile
-**/android/app/release
+
+# Flutter iOS
+apps/mobile-flutter/ios/Pods/
+apps/mobile-flutter/ios/Podfile.lock
+apps/mobile-flutter/ios/Flutter/App.framework
+apps/mobile-flutter/ios/Flutter/engine
+apps/mobile-flutter/ios/Flutter/flutter_assets/
+apps/mobile-flutter/ios/Flutter/Generated.xcconfig
+apps/mobile-flutter/ios/Flutter/ephemeral/
+apps/mobile-flutter/ios/Flutter/flutter_export_environment.sh
+apps/mobile-flutter/ios/Runner/GeneratedPluginRegistrant.*
+# Keep Info.plist, it's usually tracked
+# apps/mobile-flutter/ios/Runner/Info.plist
+
+# Flutter Android
+apps/mobile-flutter/android/.gradle/
+apps/mobile-flutter/android/app/build/
+apps/mobile-flutter/android/build/
+apps/mobile-flutter/android/app/debug/
+apps/mobile-flutter/android/app/profile/
+apps/mobile-flutter/android/app/release/
+
+# React Native Android
+apps/mobile/android/app/build/
+apps/mobile/android/build/
+apps/mobile/android/.gradle/
+apps/mobile/android/app/src/main/assets/index.android.bundle
+apps/mobile/android/app/src/main/res/drawable-*/
+apps/mobile/android/app/src/main/res/raw/
+
+# React Native iOS
+apps/mobile/ios/build/
+apps/mobile/ios/Pods/
+apps/mobile/ios/Podfile.lock
diff --git a/apps/web/package.json b/apps/web/package.json
index 261fcdc..0d7f8a8 100644
--- a/apps/web/package.json
+++ b/apps/web/package.json
@@ -3,9 +3,9 @@
   "version": "0.1.0",
   "private": true,
   "scripts": {
-    "dev": "next dev",
+    "dev": "next dev -p 4444",
     "build": "next build",
-    "start": "next start",
+    "start": "next start -p 4444",
     "lint": "next lint"
   },
   "dependencies": {
diff --git a/apps/web/src/app/page.tsx b/apps/web/src/app/page.tsx
index 3a8dadd..1ee27ef 100644
--- a/apps/web/src/app/page.tsx
+++ b/apps/web/src/app/page.tsx
@@ -65,7 +65,7 @@ export default function Home() {
         </div>
 
         {/* Recording Studio */}
-        <div className="mb-8 sm:mb-12">
+        <div id="recording-section" className="mb-8 sm:mb-12">
           {isConnected ? (
             <StarknetRecordingStudio />
           ) : (
@@ -140,8 +140,43 @@ export default function Home() {
           </div>
         )}
 
-        {/* Platform Info & Ecosystem */}
+        {/* SocialFi Mission CTA */}
         <div className="text-center mt-12 sm:mt-16 max-w-4xl mx-auto">
+          <div className="voisss-card mb-8">
+            <div className="text-center">
+              <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-[#7C5DFA] to-[#9C88FF] rounded-full mb-4">
+                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
+                </svg>
+              </div>
+              <h2 className="text-2xl sm:text-3xl font-bold text-white mb-4">
+                ðŸŽ¯ New: SocialFi Missions
+              </h2>
+              <p className="text-lg text-gray-300 mb-6">
+                Record candid conversations on trending topics and earn STRK tokens for authentic perspectives
+              </p>
+              <div className="flex flex-col sm:flex-row gap-4 justify-center">
+                <a
+                  href="/missions"
+                  className="px-6 py-3 bg-gradient-to-r from-[#7C5DFA] to-[#9C88FF] text-white font-semibold rounded-xl hover:from-[#6B4CE6] hover:to-[#8B7AFF] transition-all duration-200 flex items-center justify-center gap-2"
+                >
+                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
+                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
+                  </svg>
+                  Explore Missions
+                </a>
+                <button
+                  onClick={() => {
+                    document.getElementById('recording-section')?.scrollIntoView({ behavior: 'smooth' });
+                  }}
+                  className="px-6 py-3 bg-[#2A2A2A] border border-[#3A3A3A] text-white font-semibold rounded-xl hover:bg-[#3A3A3A] transition-colors"
+                >
+                  Start Recording
+                </button>
+              </div>
+            </div>
+          </div>
+
           <p className="text-base sm:text-lg mb-6 sm:mb-8 text-gray-300 px-4">
             Transform how you capture, organize, and share audio content with
             our comprehensive three-app ecosystem on Starknet.
diff --git a/apps/web/src/components/StarknetRecordingStudio.tsx b/apps/web/src/components/StarknetRecordingStudio.tsx
index 1c45e0a..36383b0 100644
--- a/apps/web/src/components/StarknetRecordingStudio.tsx
+++ b/apps/web/src/components/StarknetRecordingStudio.tsx
@@ -2,11 +2,17 @@
 
 import React, { useState, useRef, useEffect } from "react";
 import { useAccount } from "@starknet-react/core";
+import { useSearchParams } from "next/navigation";
 import {
   createIPFSService,
   createStarknetRecordingService,
   createRecordingService,
-} from "@voisss/shared";
+  missionService,
+  Mission,
+  MissionContext,
+  VoiceRecording as Recording,
+} from "@repo/shared";
+import MissionRecordingInterface from "./socialfi/MissionRecordingInterface";
 
 // Local interfaces until exports are fixed
 interface RecordingMetadata {
@@ -17,6 +23,7 @@ interface RecordingMetadata {
   fileSize: number;
   isPublic: boolean;
   tags: string[];
+  missionContext?: MissionContext;
 }
 
 interface PipelineProgress {
@@ -46,23 +53,9 @@ const formatFileSize = (bytes: number): string => {
   return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
 };
 
-interface Recording {
-  id: string;
-  title: string;
-  blob?: Blob; // Optional for IPFS-stored recordings
-  duration: number;
-  timestamp: Date;
-  onChain?: boolean;
-  transactionHash?: string;
-  ipfsHash?: string;
-  ipfsUrl?: string;
-  fileSize?: number;
-  isHidden?: boolean; // For user to hide recordings from their feed
-  customTitle?: string; // User-defined title override
-}
-
 export default function StarknetRecordingStudio() {
   const { address, isConnected, account } = useAccount();
+  const [mission, setMission] = useState<Mission | null>(null);
   const [isRecording, setIsRecording] = useState(false);
   const [recordings, setRecordings] = useState<Recording[]>([]);
   const [currentRecording, setCurrentRecording] = useState<Recording | null>(
@@ -89,7 +82,8 @@ export default function StarknetRecordingStudio() {
   const analyserRef = useRef<AnalyserNode | null>(null);
   const streamRef = useRef<MediaStream | null>(null);
   const chunksRef = useRef<Blob[]>([]);
-  const intervalRef = useRef<NodeJS.Timeout | null>(null);
+  const intervalRef = useRef<ReturnType<typeof setTimeout> | null>(null);
+  const searchParams = useSearchParams();
 
   // Local storage key for recordings
   const getStorageKey = (userAddress: string) =>
@@ -144,9 +138,9 @@ export default function StarknetRecordingStudio() {
 
       // Convert Starknet recordings to our Recording interface
       return starknetRecordings
-        .filter((sr) => sr && sr.id) // Filter out null/undefined recordings
+        .filter((sr: any) => sr && sr.id) // Filter out null/undefined recordings
         .map(
-          (sr): Recording => ({
+          (sr: any): Recording => ({
             id: String(sr.id || ""),
             title: String(sr.title || "Untitled Recording"),
             duration: Number(sr.duration || 0),
@@ -176,9 +170,9 @@ export default function StarknetRecordingStudio() {
     // Merge recordings, avoiding duplicates based on transaction hash or IPFS hash
     const allRecordings = [...localRecordings];
 
-    starknetRecordings.forEach((starknetRec) => {
+    starknetRecordings.forEach((starknetRec: Recording) => {
       const exists = allRecordings.some(
-        (localRec) =>
+        (localRec: Recording) =>
           (localRec.transactionHash &&
             localRec.transactionHash === starknetRec.transactionHash) ||
           (localRec.ipfsHash && localRec.ipfsHash === starknetRec.ipfsHash)
@@ -197,7 +191,7 @@ export default function StarknetRecordingStudio() {
 
   // Recording management functions
   const updateRecording = (id: string, updates: Partial<Recording>) => {
-    const updatedRecordings = recordings.map((recording) =>
+    const updatedRecordings = recordings.map((recording: Recording) =>
       recording.id === id ? { ...recording, ...updates } : recording
     );
     setRecordings(updatedRecordings);
@@ -209,7 +203,7 @@ export default function StarknetRecordingStudio() {
   };
 
   const toggleRecordingVisibility = (id: string) => {
-    const recording = recordings.find((r) => r.id === id);
+    const recording = recordings.find((r: Recording) => r.id === id);
     if (recording) {
       updateRecording(id, { isHidden: !recording.isHidden });
     }
@@ -243,7 +237,7 @@ export default function StarknetRecordingStudio() {
 
   // Filter recordings based on visibility
   const visibleRecordings = recordings.filter(
-    (recording) => showHidden || !recording.isHidden
+    (recording: Recording) => showHidden || !recording.isHidden
   );
 
   // Initialize recording service
@@ -277,7 +271,9 @@ export default function StarknetRecordingStudio() {
         clearInterval(intervalRef.current);
       }
       if (streamRef.current) {
-        streamRef.current.getTracks().forEach((track) => track.stop());
+        streamRef.current
+          .getTracks()
+          .forEach((track: MediaStreamTrack) => track.stop());
       }
       if (recordingService) {
         recordingService.dispose();
@@ -285,6 +281,18 @@ export default function StarknetRecordingStudio() {
     };
   }, []);
 
+  // Load mission from URL
+  useEffect(() => {
+    const missionId = searchParams.get("missionId");
+    if (missionId) {
+      const foundMission = missionService.getMissionById(missionId);
+      if (foundMission) {
+        setMission(foundMission);
+        setTitle(foundMission.title);
+      }
+    }
+  }, [searchParams]);
+
   // Load recordings when wallet connects
   useEffect(() => {
     if (isConnected && address && recordingService) {
@@ -324,7 +332,7 @@ export default function StarknetRecordingStudio() {
 
       chunksRef.current = [];
 
-      mediaRecorderRef.current.ondataavailable = (event) => {
+      mediaRecorderRef.current.ondataavailable = (event: BlobEvent) => {
         if (event.data.size > 0) {
           chunksRef.current.push(event.data);
         }
@@ -334,11 +342,27 @@ export default function StarknetRecordingStudio() {
         const blob = new Blob(chunksRef.current, { type: "audio/webm" });
         const recording: Recording = {
           id: Date.now().toString(),
-          title: `Recording ${new Date().toLocaleTimeString()}`,
+          title: mission
+            ? mission.title
+            : `Recording ${new Date().toLocaleTimeString()}`,
           blob,
           duration,
           timestamp: new Date(),
           onChain: false,
+          missionContext: mission
+            ? {
+                missionId: mission.id,
+                title: mission.title,
+                description: mission.description,
+                topic: mission.topic,
+                difficulty: mission.difficulty,
+                reward: mission.reward,
+                targetDuration: mission.targetDuration,
+                examples: mission.examples,
+                contextSuggestions: mission.contextSuggestions,
+                acceptedAt: new Date(),
+              }
+            : undefined,
         };
 
         setCurrentRecording(recording);
@@ -385,7 +409,9 @@ export default function StarknetRecordingStudio() {
       }
 
       if (streamRef.current) {
-        streamRef.current.getTracks().forEach((track) => track.stop());
+        streamRef.current
+          .getTracks()
+          .forEach((track: MediaStreamTrack) => track.stop());
       }
 
       if (audioContextRef.current) {
@@ -418,11 +444,25 @@ export default function StarknetRecordingStudio() {
         currentRecording.blob,
         {
           title: title.trim(),
-          description: "",
+          description: mission ? mission.description : "",
           isPublic,
-          tags: [],
+          tags: mission ? [mission.topic] : [],
           quality: "medium",
           convertAudio: true,
+          missionContext: mission
+            ? {
+                missionId: mission.id,
+                title: mission.title,
+                description: mission.description,
+                topic: mission.topic,
+                difficulty: mission.difficulty,
+                reward: mission.reward,
+                targetDuration: mission.targetDuration,
+                examples: mission.examples,
+                contextSuggestions: mission.contextSuggestions,
+                acceptedAt: new Date(),
+              }
+            : undefined,
         },
         account || undefined,
         (progress: PipelineProgress) => {
@@ -439,6 +479,8 @@ export default function StarknetRecordingStudio() {
           ipfsHash: result.ipfsHash,
           ipfsUrl: result.ipfsUrl,
           fileSize: currentRecording.blob.size,
+          isCompleted: !!mission,
+          completedAt: mission ? new Date() : undefined,
         };
 
         const newRecordings = [...recordings, updatedRecording];
@@ -498,7 +540,7 @@ export default function StarknetRecordingStudio() {
 
     return (
       <div className="h-24 bg-[#2A2A2A] rounded-lg flex items-end justify-center gap-1 p-2">
-        {waveformData.map((value, index) => (
+        {waveformData.map((value: number, index: number) => (
           <div
             key={index}
             className="voisss-waveform-bar"
@@ -514,6 +556,26 @@ export default function StarknetRecordingStudio() {
 
   return (
     <div className="max-w-4xl mx-auto voisss-section-spacing">
+      {/* Mission Context */}
+      {mission && (
+        <div className="mb-8">
+          <MissionRecordingInterface
+            missionContext={{
+              missionId: mission.id,
+              title: mission.title,
+              description: mission.description,
+              topic: mission.topic,
+              difficulty: mission.difficulty,
+              reward: mission.reward,
+              targetDuration: mission.targetDuration,
+              examples: mission.examples,
+              contextSuggestions: mission.contextSuggestions,
+              acceptedAt: new Date(), // This should be set when the user accepts the mission
+            }}
+          />
+        </div>
+      )}
+
       {/* Header Section */}
       <div className="voisss-card text-center">
         <div className="mb-6">
@@ -659,7 +721,9 @@ export default function StarknetRecordingStudio() {
               <input
                 type="text"
                 value={title}
-                onChange={(e) => setTitle(e.target.value)}
+                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
+                  setTitle(e.target.value)
+                }
                 placeholder="Enter a descriptive title for your recording..."
                 className="w-full px-4 py-3 bg-[#2A2A2A] border border-[#3A3A3A] rounded-xl text-white placeholder-gray-500 focus:border-[#7C5DFA] focus:ring-1 focus:ring-[#7C5DFA] transition-colors voisss-mobile-input"
               />
@@ -670,7 +734,9 @@ export default function StarknetRecordingStudio() {
                 type="checkbox"
                 id="isPublic"
                 checked={isPublic}
-                onChange={(e) => setIsPublic(e.target.checked)}
+                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
+                  setIsPublic(e.target.checked)
+                }
                 className="w-5 h-5 text-[#7C5DFA] bg-[#1A1A1A] border-[#3A3A3A] rounded focus:ring-[#7C5DFA] focus:ring-2"
               />
               <div>
@@ -900,7 +966,7 @@ export default function StarknetRecordingStudio() {
           </div>
 
           <div className="space-y-4">
-            {visibleRecordings.map((recording) => (
+            {visibleRecordings.map((recording: Recording) => (
               <div key={recording.id} className="voisss-recording-card">
                 <div className="voisss-recording-header">
                   <div className="voisss-recording-content">
@@ -910,9 +976,13 @@ export default function StarknetRecordingStudio() {
                           <input
                             type="text"
                             value={editTitle}
-                            onChange={(e) => setEditTitle(e.target.value)}
+                            onChange={(
+                              e: React.ChangeEvent<HTMLInputElement>
+                            ) => setEditTitle(e.target.value)}
                             className="flex-1 px-3 py-1 bg-[#1A1A1A] border border-[#3A3A3A] rounded text-white text-lg font-semibold focus:border-[#7C5DFA] focus:ring-1 focus:ring-[#7C5DFA] voisss-mobile-input"
-                            onKeyDown={(e) => {
+                            onKeyDown={(
+                              e: React.KeyboardEvent<HTMLInputElement>
+                            ) => {
                               if (e.key === "Enter") saveEditedTitle();
                               if (e.key === "Escape") cancelEditingTitle();
                             }}
diff --git a/packages/shared/src/index.ts b/packages/shared/src/index.ts
index 524f2e8..5e928db 100644
--- a/packages/shared/src/index.ts
+++ b/packages/shared/src/index.ts
@@ -1,5 +1,6 @@
 // Shared types and utilities for VOISSS platform
 export * from './types';
+export * from './types/socialfi';
 export * from './utils';
 export * from './constants';
 export * from './theme';
@@ -7,3 +8,4 @@ export * from './services/starknet-recording';
 export * from './services/ipfs-service';
 export * from './services/audio-converter';
 export * from './services/recording-service';
+export * from './services/mission-service';
diff --git a/packages/shared/src/types.ts b/packages/shared/src/types.ts
index 21eaab1..bdc2390 100644
--- a/packages/shared/src/types.ts
+++ b/packages/shared/src/types.ts
@@ -1,5 +1,21 @@
 import { z } from 'zod';
 
+// Mission Context for Recordings
+export const MissionContextSchema = z.object({
+  missionId: z.string(),
+  title: z.string(),
+  description: z.string(),
+  topic: z.string(),
+  difficulty: z.enum(['easy', 'medium', 'hard']),
+  reward: z.number(),
+  targetDuration: z.number(),
+  examples: z.array(z.string()),
+  contextSuggestions: z.array(z.string()),
+  acceptedAt: z.date(),
+});
+
+export type MissionContext = z.infer<typeof MissionContextSchema>;
+
 // Voice Recording Types
 export const VoiceRecordingSchema = z.object({
   id: z.string(),
@@ -15,10 +31,57 @@ export const VoiceRecordingSchema = z.object({
   isPublic: z.boolean(),
   starknetTxHash: z.string().optional(), // Transaction hash for blockchain storage
   ipfsHash: z.string().optional(), // IPFS hash for decentralized storage
+  // Mission-related fields
+  missionContext: MissionContextSchema.optional(), // Mission this recording was created for
+  isCompleted: z.boolean().default(false), // Whether this recording completes a mission
+  completedAt: z.date().optional(), // When the mission was completed
+  location: z.object({
+    city: z.string(),
+    country: z.string(),
+    coordinates: z.object({
+      lat: z.number(),
+      lng: z.number(),
+    }).optional(),
+  }).optional(), // Location where recording was made
+  context: z.string().optional(), // Context where recording was made (taxi, coffee shop, etc.)
+  participantConsent: z.boolean().default(false), // Whether participant consent was obtained
+  consentProof: z.string().optional(), // IPFS hash of consent recording/document
+  isAnonymized: z.boolean().default(false), // Whether voices are anonymized
+  voiceObfuscated: z.boolean().default(false), // Whether voice obfuscation was applied
 });
 
 export type VoiceRecording = z.infer<typeof VoiceRecordingSchema>;
 
+// Mission-aware recording interface for UI components
+export interface MissionRecording {
+  id: string;
+  title: string;
+  blob?: Blob;
+  duration: number;
+  timestamp: Date;
+  onChain?: boolean;
+  transactionHash?: string;
+  ipfsHash?: string;
+  ipfsUrl?: string;
+  fileSize?: number;
+  isHidden?: boolean;
+  customTitle?: string;
+  // Mission-specific fields
+  missionContext?: MissionContext;
+  isCompleted?: boolean;
+  completedAt?: Date;
+  location?: {
+    city: string;
+    country: string;
+    coordinates?: { lat: number; lng: number };
+  };
+  context?: string;
+  participantConsent?: boolean;
+  consentProof?: string;
+  isAnonymized?: boolean;
+  voiceObfuscated?: boolean;
+}
+
 // User Types
 export const UserSchema = z.object({
   id: z.string(),
